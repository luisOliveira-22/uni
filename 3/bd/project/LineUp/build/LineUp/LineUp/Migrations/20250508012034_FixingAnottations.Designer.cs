// <auto-generated />
using System;
using LineUp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LineUp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250508012034_FixingAnottations")]
    partial class FixingAnottations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LineUp.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LineUp.Models.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Club_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FoundationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Club_name");

                    b.Property<int>("TransferBudget")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Club", "ConfManagement");
                });

            modelBuilder.Entity("LineUp.Models.Contracts", b =>
                {
                    b.Property<int>("Cont_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cont_id"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("Person_id")
                        .HasColumnType("int");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Cont_id");

                    b.HasIndex("Person_id")
                        .IsUnique();

                    b.ToTable("Contracts", "ConfManagement");
                });

            modelBuilder.Entity("LineUp.Models.Department", b =>
                {
                    b.Property<int>("Dep_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Dep_id"));

                    b.Property<int>("Club_id")
                        .HasColumnType("int");

                    b.Property<string>("DepName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Dep_id");

                    b.HasIndex("Club_id");

                    b.ToTable("Department", "ConfManagement");
                });

            modelBuilder.Entity("LineUp.Models.Employee", b =>
                {
                    b.Property<int>("Emp_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Emp_id"));

                    b.Property<int>("Dep_id")
                        .HasColumnType("int");

                    b.Property<string>("Emp_function")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Person_id")
                        .HasColumnType("int");

                    b.HasKey("Emp_id");

                    b.HasIndex("Dep_id");

                    b.HasIndex("Person_id")
                        .IsUnique();

                    b.ToTable("Emplyee", "ConfManagement");
                });

            modelBuilder.Entity("LineUp.Models.GameStats", b =>
                {
                    b.Property<int>("Game_id")
                        .HasColumnType("int");

                    b.Property<int>("Goal_team1")
                        .HasColumnType("int");

                    b.Property<int>("Goal_team2")
                        .HasColumnType("int");

                    b.HasKey("Game_id");

                    b.ToTable("GameStats", "ConfManagement");
                });

            modelBuilder.Entity("LineUp.Models.Games", b =>
                {
                    b.Property<int>("Game_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Game_id"));

                    b.Property<string>("Game_location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Game_statics")
                        .HasColumnType("int");

                    b.Property<int>("team1_id")
                        .HasColumnType("int");

                    b.Property<int>("team2_id")
                        .HasColumnType("int");

                    b.HasKey("Game_id");

                    b.HasIndex("team1_id");

                    b.HasIndex("team2_id");

                    b.ToTable("Games", "ConfManagement");
                });

            modelBuilder.Entity("LineUp.Models.Person", b =>
                {
                    b.Property<int>("Person_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Person_id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Person_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Person_id");

                    b.ToTable("Person", "ConfManagement");
                });

            modelBuilder.Entity("LineUp.Models.Player", b =>
                {
                    b.Property<int>("Player_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Player_id"));

                    b.Property<int>("Club_id")
                        .HasColumnType("int");

                    b.Property<int>("MarketValue")
                        .HasColumnType("int");

                    b.Property<int>("Person_id")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Player_id");

                    b.HasIndex("Club_id");

                    b.HasIndex("Person_id")
                        .IsUnique();

                    b.ToTable("Player", "ConfManagement");
                });

            modelBuilder.Entity("LineUp.Models.PlayerGameStats", b =>
                {
                    b.Property<int>("Stat_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Stat_id"));

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EnterAt")
                        .HasColumnType("time");

                    b.Property<int>("Game_id")
                        .HasColumnType("int");

                    b.Property<int>("Goals")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("LeaveAt")
                        .HasColumnType("time");

                    b.Property<int>("Player_id")
                        .HasColumnType("int");

                    b.Property<int>("RedCards")
                        .HasColumnType("int");

                    b.Property<int>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("Stat_id");

                    b.HasIndex("Game_id");

                    b.HasIndex("Player_id");

                    b.ToTable("PlayerGameStats", "ConfManagement");
                });

            modelBuilder.Entity("LineUp.Models.Transference", b =>
                {
                    b.Property<int>("Trans_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Transf_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trans_Id"));

                    b.Property<int>("Destination_Club")
                        .HasColumnType("int");

                    b.Property<int>("Destination_club")
                        .HasColumnType("int");

                    b.Property<int>("Previus_club")
                        .HasColumnType("int");

                    b.Property<int>("Trans_player")
                        .HasColumnType("int");

                    b.Property<int>("Trans_value")
                        .HasColumnType("int");

                    b.HasKey("Trans_Id");

                    b.HasIndex("Destination_club");

                    b.HasIndex("Previus_club");

                    b.HasIndex("Trans_player");

                    b.ToTable("Transference", "ConfManagement");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LineUp.Models.AppUser", b =>
                {
                    b.HasOne("LineUp.Models.Club", "Club")
                        .WithOne("User")
                        .HasForeignKey("LineUp.Models.AppUser", "ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("LineUp.Models.Contracts", b =>
                {
                    b.HasOne("LineUp.Models.Person", "Person")
                        .WithOne("Contract")
                        .HasForeignKey("LineUp.Models.Contracts", "Person_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("LineUp.Models.Department", b =>
                {
                    b.HasOne("LineUp.Models.Club", "Club")
                        .WithMany("Departments")
                        .HasForeignKey("Club_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("LineUp.Models.Employee", b =>
                {
                    b.HasOne("LineUp.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("Dep_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LineUp.Models.Person", "Person")
                        .WithOne("Employee")
                        .HasForeignKey("LineUp.Models.Employee", "Person_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("LineUp.Models.GameStats", b =>
                {
                    b.HasOne("LineUp.Models.Games", "Game")
                        .WithOne("GameStats")
                        .HasForeignKey("LineUp.Models.GameStats", "Game_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("LineUp.Models.Games", b =>
                {
                    b.HasOne("LineUp.Models.Club", "Team1")
                        .WithMany("HomeGames")
                        .HasForeignKey("team1_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LineUp.Models.Club", "Team2")
                        .WithMany("AwayGames")
                        .HasForeignKey("team2_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team1");

                    b.Navigation("Team2");
                });

            modelBuilder.Entity("LineUp.Models.Player", b =>
                {
                    b.HasOne("LineUp.Models.Club", "Club")
                        .WithMany("Players")
                        .HasForeignKey("Club_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LineUp.Models.Person", "Person")
                        .WithOne("Player")
                        .HasForeignKey("LineUp.Models.Player", "Person_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("LineUp.Models.PlayerGameStats", b =>
                {
                    b.HasOne("LineUp.Models.Games", "Game")
                        .WithMany("PlayerGameStats")
                        .HasForeignKey("Game_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LineUp.Models.Player", "Player")
                        .WithMany("PlayerGameStats")
                        .HasForeignKey("Player_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("LineUp.Models.Transference", b =>
                {
                    b.HasOne("LineUp.Models.Club", "Dest_Club")
                        .WithMany("DestClub")
                        .HasForeignKey("Destination_club")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LineUp.Models.Club", "Prev_Club")
                        .WithMany("PrevClub")
                        .HasForeignKey("Previus_club")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LineUp.Models.Player", "Player")
                        .WithMany("Transferences")
                        .HasForeignKey("Trans_player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dest_Club");

                    b.Navigation("Player");

                    b.Navigation("Prev_Club");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LineUp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LineUp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LineUp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LineUp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LineUp.Models.Club", b =>
                {
                    b.Navigation("AwayGames");

                    b.Navigation("Departments");

                    b.Navigation("DestClub");

                    b.Navigation("HomeGames");

                    b.Navigation("Players");

                    b.Navigation("PrevClub");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("LineUp.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("LineUp.Models.Games", b =>
                {
                    b.Navigation("GameStats")
                        .IsRequired();

                    b.Navigation("PlayerGameStats");
                });

            modelBuilder.Entity("LineUp.Models.Person", b =>
                {
                    b.Navigation("Contract")
                        .IsRequired();

                    b.Navigation("Employee")
                        .IsRequired();

                    b.Navigation("Player")
                        .IsRequired();
                });

            modelBuilder.Entity("LineUp.Models.Player", b =>
                {
                    b.Navigation("PlayerGameStats");

                    b.Navigation("Transferences");
                });
#pragma warning restore 612, 618
        }
    }
}
