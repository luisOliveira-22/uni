#include <detpic32.h>

void config(void);
void delay(unsigned int ms);
void send2display(unsigned char val);
static const char display7Scodes[] = {0x3F, 0x06, 0x5b, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71};

int main(void){
    config();
    int voltage;

    TRISEbits.TRISE1 = 0;                    	// RE1
    LATEbits.LATE1 = 0;                		// valor inicial a 0

    TRISDbits.TRISD5 = 0;                	// escrever no D5, display menos significativo
    TRISB = TRISB & 0X80FF;                	// 1000 0000 1111 1111

    int i, sum;
    while(1){
        AD1CON1bits.ASAM = 1;            	// [PDF] Start conversion
        while(IFS1bits.AD1IF == 0);        	// [PDF] Wait while conversion not done

        int* p = (int*) (&ADC1BUF0);
        sum = 0;
        for(i = 0; i < 2; i++){
            sum += p[i*4];
        }

        sum = (sum*33 + 511) / 1023;
        voltage = sum / 2;

        printInt(voltage, 16 | 3 << 16);	// alinea i)
        putChar('\n');
        send2display(voltage);

        IFS1bits.AD1IF = 0;                	// [PDF]

        LATEbits.LATE1 = !LATEbits.LATE1;    	// alinea iii)
        delay(166);                		// 1/6Hz =  0,1666666... // depois multiplicar por 1000 -> 166
    }
    return 0;
}

void config(void){
    TRISBbits.TRISB4 = 1;                       // 
    AD1PCFGbits.PCFG4= 0;                       // 
    AD1CON1bits.SSRC = 7;
    AD1CON1bits.CLRASAM = 1;
    AD1CON3bits.SAMC = 16;
    AD1CON2bits.SMPI = 2-1;                     // N = nº conversoes (ou amostras)
    AD1CHSbits.CH0SA = 4;                      	// AN4
    AD1CON1bits.ON = 1;
}

void delay(unsigned int ms){
    resetCoreTimer();
    while(readCoreTimer() < 20000 * ms);
}

void send2display(unsigned char val){
    val = val * 9 / 33;                  	//
    int displayLow = val & 0x0F;                // 

    LATDbits.LATD5 = 1;                  	// selecionar o display menos significativo, que é o 5 e nao o 6
    LATB = (LATB & 0x80FF) | (display7Scodes[displayLow] << 8);
}